import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import datetime

class BMICalculator:
    def __init__(self, master):
        self.master = master
        self.master.title("BMI Calculator")

        # Variables for user input
        self.weight_var = tk.DoubleVar()
        self.height_var = tk.DoubleVar()

        # Variables for historical data
        self.users_data = {}

        # GUI Components
        self.create_input_frame()
        self.create_result_frame()
        self.create_history_frame()

    def create_input_frame(self):
        self.input_frame = ttk.LabelFrame(self.master, text="Input", padding=(10, 5))
        self.input_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(self.input_frame, text="Weight (kg):").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        weight_entry = ttk.Entry(self.input_frame, textvariable=self.weight_var)
        weight_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

        ttk.Label(self.input_frame, text="Height (m):").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        height_entry = ttk.Entry(self.input_frame, textvariable=self.height_var)
        height_entry.grid(row=1, column=1, padx=5, pady=5, sticky="w")

        calculate_button = ttk.Button(self.input_frame, text="Calculate BMI", command=self.calculate_bmi)
        calculate_button.grid(row=2, column=0, columnspan=2, pady=10)

    def create_result_frame(self):
        self.result_frame = ttk.LabelFrame(self.master, text="Result", padding=(10, 5))
        self.result_frame.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        self.result_label = ttk.Label(self.result_frame, text="BMI Result: ")
        self.result_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")

        self.category_label = ttk.Label(self.result_frame, text="Category: ")
        self.category_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")

    def create_history_frame(self):
        history_frame = ttk.LabelFrame(self.master, text="History", padding=(10, 5))
        history_frame.grid(row=0, column=1, rowspan=2, padx=10, pady=10, sticky="nsew")

        self.tree = ttk.Treeview(history_frame, columns=("Date", "BMI", "Category"))
        self.tree.heading("#0", text="User")
        self.tree.heading("Date", text="Date")
        self.tree.heading("BMI", text="BMI")
        self.tree.heading("Category", text="Category")
        self.tree.column("#0", width=100)
        self.tree.column("Date", width=150)
        self.tree.column("BMI", width=100)
        self.tree.column("Category", width=100)
        self.tree.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

        # Vertical scrollbar
        vsb = ttk.Scrollbar(history_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=vsb.set)
        vsb.grid(row=0, column=1, sticky="ns")

    def calculate_bmi(self):
        weight = self.weight_var.get()
        height = self.height_var.get()

        if weight > 0 and height > 0:
            bmi = round(weight / (height ** 2), 2)
            result_text = f"BMI Result: {bmi}"

            # Classify into categories
            category = self.classify_bmi(bmi)
            category_text = f"Category: {category}"

            # Display result and category
            self.result_label.config(text=result_text)
            self.category_label.config(text=category_text)

            # Save data to history
            date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.users_data[date] = {"Weight": weight, "Height": height, "BMI": bmi, "Category": category}

            # Update history treeview
            self.update_history_tree()

            # Plot BMI trend
            self.plot_bmi_trend()

    def classify_bmi(self, bmi):
        if bmi < 18.5:
            return "Underweight"
        elif 18.5 <= bmi < 24.9:
            return "Normal Weight"
        elif 25 <= bmi < 29.9:
            return "Overweight"
        else:
            return "Obese"

    def update_history_tree(self):
        # Clear existing items
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Add new items
        for date, data in self.users_data.items():
            weight = data["Weight"]
            height = data["Height"]
            bmi = data["BMI"]
            category = data["Category"]

            self.tree.insert("", "end", values=(date, bmi, category))

    def plot_bmi_trend(self):
        dates = list(self.users_data.keys())
        bmis = [data["BMI"] for data in self.users_data.values()]

        fig, ax = plt.subplots()
        ax.plot(dates, bmis, marker='o', linestyle='-')
        ax.set(xlabel='Date', ylabel='BMI',
               title='BMI Trend Over Time')
        ax.grid()

        # Display the plot in the GUI
        canvas = FigureCanvasTkAgg(fig, master=self.master)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.grid(row=2, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        # Redraw the canvas
        canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = BMICalculator(root)
    root.mainloop()